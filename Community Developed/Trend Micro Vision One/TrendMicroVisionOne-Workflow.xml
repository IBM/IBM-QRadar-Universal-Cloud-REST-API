<?xml version="1.0" encoding="UTF-8" ?>
<Workflow name="TrendMicro Vision One" version="1.0" xmlns="http://qradar.ibm.com/UniversalCloudRESTAPI/Workflow/V2">

	<Parameters>
		<Parameter name="bearer_token" label="bearer_token" required="true" secret="true" />
		<!-- URL, check here for the corect base URL https://automation.trendmicro.com/xdr/Guides/Regional-Domains -->
		<Parameter name="hostURL" label="URL" required="true" />
	</Parameters>

	<Actions>
		<!-- Clear the log source status before a new workflow run starts -->
		<ClearStatus />	
		<Set value="yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" path="/dateFormat" />
	
		<!-- log a message for the system notificatoin log that the workflow started -->
		<FormatDate pattern="${/dateFormat}" timeZone="UTC" time="${time()}" savePath="/current_Time" />
		<Log type="INFO" message="${/host}: Workflow startet at ${/current_Time}" />		
		
		<!-- set a startTime (today - 24 hours (86400000 ns) if the workflow runs for the first time on a system, if a startDateTime from a previous run already exists, skip and continue -->
		<If condition="empty(/startDateTime)" >
			<!-- Initialize the first startdatetime if not yet initialized with date which is current timestamp minus 24 hours (minus 864000000)  -->
			<Initialize path="/startDateTime" value="${time() - 86400000}" />
			<!-- Format date to work with the API -->
			<FormatDate pattern="${/dateFormat}" timeZone="UTC" time="${/startDateTime}" savePath="/startDateTime" />
		</If>
		
		<!-- Format date to work with the Trend Micro Vision One API's date format -->
		<FormatDate pattern="${/dateFormat}" timeZone="UTC" time="${time()}" savePath="/endDateTime" />
		
		<!-- Create a syslog LEEF header  -->
			<!-- first part of the header. The three "-" characters are placed after the log source identifier and before the "LEEF"-string to be fully RFC5424 compliant as they represent blank values for APP-NAME PROCID and MSGID  -->
			<Set value="&lt;191&gt;1 ${/endDateTime} ${/logSourceIdentifier} - - - LEEF:2.0|IBM|Trend Micro Vision One|1.0|" path="/syslogHeaderPart1"/>
			<!-- Second part of the header with cat=Suspicious Activity  -->
			<Set value="|0x7c|cat=Suspicious Activity&#124;devTime=${/endDateTime}&#124;devTimeFormat=${/dateFormat}&#124;" path="/syslogHeaderPart2CatSuspiciousActivity"/>
			<!-- Second part of the header with cat=System  -->
			<Set value="|0x7c|cat=System&#124;devTime=${/endDateTime}&#124;devTimeFormat=${/dateFormat}&#124;" path="/syslogHeaderPart2CatSystem"/>
			<!-- EventIDs  -->
			<Set value="NoAlertsReported" path="/noAlertsReported"/>
			<Set value="AlertFound" path="/AlertFound"/>
			<Set value="INFO" path="/INFO"/>
		
		<!-- Pull Events from API -->
            <CallEndpoint url="https://${/hostURL}/v2.0/siem/events" method="GET" savePath="/get_events_alertList/response">
                <BearerAuthentication token="${/bearer_token}"/>
				<QueryParameter name="startDateTime" value="${/startDateTime}" />
				<QueryParameter name="endDateTime" value="${/endDateTime}" />
				<RequestHeader name="contentType" value="'Content-Type': 'application/json;charset=utf-8'" />
			</CallEndpoint>
			
			<!-- Handle HTTP Errors -->
			<If condition="/get_events_alertList/response/status_code != 200">
				<Abort reason="HTTP GET request (towards &quot;v2.0/siem/events&quot;) failed: ${/get_events_alertList/response/body}" />
				<SetStatus type="ERROR" message="HTTP GET request (towards &quot;v2.0/siem/events&quot;) failed: ${/get_events_alertList/response/body}" />
			</If>
		
		<!-- Check if any alerts were found during the timeframe the query was looking for, if not skip the step to pull alert details (and post a message to the event log) -->
		<If condition="/get_events_alertList/response/body/data/totalCount > 0" >
        	
			<!-- For each Workbench ID get the alarm details -->
			<ForEach item="/current_event" items="/get_events_alertList/response/body/data/workbenchRecords">
				<!-- Pull Alert deatils from the workbench API -->
				<CallEndpoint url="https://${/hostURL}/v2.0/xdr/workbench/workbenches/${/current_event/workbenchId}" method="GET" savePath="/get_events_alertDetails/response">
					<BearerAuthentication token="${/bearer_token}"/>
					<RequestHeader name="contentType" value="'Content-Type': 'application/json;charset=utf-8'" />
				</CallEndpoint>
				
				<!-- Handle HTTP Errors -->
				<If condition="/get_events_alertList/response/status_code != 200">
					<Abort reason="HTTP GET request (towards &quot;v2.0/xdr/workbench/workbenches/&quot;) failed: ${/get_events_alertDetails/response/body}" />
					<SetStatus type="ERROR" message="HTTP GET request (towards &quot;v2.0/xdr/workbench/workbenches/&quot;) failed: ${/get_events_alertDetails/response/body}" />
				</If>
				
				<!-- set severity as numerical value (QRadar takes only numerical values here) based on severity (low = 3, medium = 5, high = 7, critical = 9) -->
				<If condition="/get_events_alertDetails/response/body/data/modelSeverity = &quot;low&quot;" >
					<Set path="/severity" value="3"/>
				</If>
				<ElseIf condition="/get_events_alertDetails/response/body/data/modelSeverity = &quot;medium&quot;" >
					<Set path="/severity" value="5"/>
				</ElseIf>
				<ElseIf condition="/get_events_alertDetails/response/body/data/modelSeverity = &quot;high&quot;" >
					<Set path="/severity" value="7"/>
				</ElseIf>
				<ElseIf condition="/get_events_alertDetails/response/body/data/modelSeverity = &quot;critical&quot;" >
					<Set path="/severity" value="9"/>
				</ElseIf>
				
				<!-- set username: The assumption is that if a username is within the alert then it is in the first entityValue -> check if it is of type "acchount" -> use as username for the event -->
				<If condition="/get_events_alertDetails/response/body/data/impactScope[0]/entityType = &quot;account&quot;" >
					<Set path="/username" value="${/get_events_alertDetails/response/body/data/impactScope[0]/entityValue}"/>
				</If>
				
				<!-- prepare event content and post the event -->
				<Set path="/workBenchIdBody" value="${/syslogHeaderPart1}${/get_events_alertDetails/response/body/data/model}${/syslogHeaderPart2CatSuspiciousActivity}sev=${/severity}&#124;usrName=${/username}&#124;url=${/get_events_alertDetails/response/body/data/workbenchLink}&#124;LastPollStartTime=${/startDateTime}&#124;LastPollEndTime=${/endDateTime}&#124;payload=${/get_events_alertDetails/response/body}"/>
				<PostEvent path="/workBenchIdBody" source="${/host}" />
				
			</ForEach>	
		</If>
		
		<!-- if no new alerts were pulled from the API, drop an event stating this to the event pipeline -->
        <Else>
			<Set path="/noAlertsReported" value="${/syslogHeaderPart1}${/noAlertsReported}${/syslogHeaderPart2CatSystem}error=Job run successfully but no Alaram were reported from the API for the given polling timeframe&#124;LastPollStartTime=${/startDateTime}&#124;LastPollEndTime=${/endDateTime}"  />
			<PostEvent path="/noAlertsReported" source="${/host}" />
			<Log type="INFO" message="${/syslogHeaderPart1}${/INFO}${/syslogHeaderPart2CatSystem}error=Job run successfully but no Alaram were reported from the API for the given polling timeframe&#124;LastPollStartTime=${/startDateTime}&#124;LastPollEndTime=${/endDateTime}." />
		</Else>
		
		<!-- Set new startDateTime as last run EndDateTime after successful run to save the last run end for the next run as new startDateTime  -->
		<Set path="/startDateTime" value="${/endDateTime}" />
		
		<!-- log a message to system notification log that the workflow ended-->
		<FormatDate pattern="${/dateFormat}" timeZone="UTC" time="${time()}" savePath="/current_TimeEnd" />
		<Log type="INFO" message="${/host}: Workflow ended at ${/current_TimeEnd}" />
		
    </Actions>

    <Tests>
        <DNSResolutionTest host="${/hostURL}" />
        <TCPConnectionTest host="${/hostURL}" />
		<!-- <SSLHandshakeTest host="${/hostURL}" /> -->
		<!-- <HTTPConnectionThroughProxyTest url="https://${/hostURL}" /> -->
    </Tests>

</Workflow>
