<?xml version="1.0" encoding="UTF-8" ?>
<Workflow name="Vectra XDR" version="1.0"
    xmlns="http://qradar.ibm.com/UniversalCloudRESTAPI/Workflow/V2">

    <!-- Collect configurations from workflow parameter file -->
    <Parameters>
        <Parameter name="vectraHostName" label="Vectra Hostname" required="true"/>
        <Parameter name="clientId" label="Client ID" required="true"/>
        <Parameter name="historical" label="Historical Collection" required="true"/>
        <Parameter name="secretKey" label="Secret Key" secret="true" required="true" />
    </Parameters>

    <Actions>

        <!-- Clear status of log source -->
        <ClearStatus />

        <!-- Defining variables for running workflow -->
        <Set path="/vectraUrl" value="https://${/vectraHostName}"/>
        <Set path="/logPrefix" value="[Vectra_XDR_App_for_QRadar][Entity_Score][${/vectraUrl}]" />
        <Initialize path="/errorCount" value="0" />
        <Initialize path="/maxRetry" value="3" />
        <Initialize path="/createTokenEndpoint" value="/oauth2/token" />
        <Initialize path="/scoreEndpoint" value="/api/v3.3/events/entity_scoring" />
        <Initialize path="/limit" value="1000" />
        <Initialize path="/refreshToken" value="" />
        <Initialize path="/defaultSleepTime" value="30" />
        <Initialize path="/appVersion" value="1.0.0" />
        <Initialize path="/userAgentHeader" value="Vectra-QRadar-${/appVersion}" />

        <!-- Host and Account Scoring Events checkpoints -->
        <Initialize path="/hostNextCheckpoint" value="" />
        <Initialize path="/accountNextCheckpoint" value="" />

        <!-- Store current timestamp -->
        <Initialize path="/currentEpochTime" value="${time()}" />
        <FormatDate pattern="yyyy-MM-dd'T'HH:mm:ss" timeZone="UTC" time="${/currentEpochTime}" savePath="/formattedCurrentTime" />

        <!-- Store past 24 hours timestamp -->
        <Initialize path="/defaultEpochTime" value="${time() - 86400000}" />
        <FormatDate pattern="yyyy-MM-dd'T'HH:mm:ss" timeZone="UTC" time="${/defaultEpochTime}" savePath="/defaultEventTime" />

        <Set path="/errorCount" value="0" />

        <!-- Perform data collection continously in case of no error -->
        <While condition="${/errorCount != ${/maxRetry}}">

            <!-- Create Refresh Token if it is not created -->
            <If condition="${empty(/refreshToken)} = 'true'">

                <Log type="INFO" message="${/logPrefix} - Refresh token not found. Creating new Access and Refresh token using provided credentials." />

                <Set path="/rateLimitErrorCount" value="0" />
                <While condition="${/rateLimitErrorCount != ${/maxRetry}}">

                    <!-- Create Refresh token and Access Token using Client ID and secret and save response at Jpath /refreshTokenResponse -->
                    <CallEndpoint url="${/vectraUrl}${/createTokenEndpoint}" method="POST" savePath="/refreshTokenResponse">

                        <!-- Implicitly convert username and password in the format of basic authentication - "Basic Base64Encode(username:password)" -->
                        <BasicAuthentication username="${/clientId}" password="${/secretKey}" />

                        <!-- Request header -->
                        <RequestHeader name="User-Agent" value="${/userAgentHeader}" />

                        <!-- Request body in the urlencoded format -->
                        <UrlEncodedFormRequestBody>
                            <Parameter name="grant_type" value="client_credentials" />
                            <Parameter name="Accept" value="application/json" />
                            <Parameter name="content-type" value="application/x-www-form-urlencoded" />
                        </UrlEncodedFormRequestBody>
                    </CallEndpoint>

                    <!-- Retry 3 times if the status code is 429. i.e API Rate limit exceeded. -->
                    <If condition="${/refreshTokenResponse/status_code} = 429">
                        <Set path="/rateLimitErrorCount" value="${/rateLimitErrorCount + 1}" />
                        <Log type="INFO" message="${/logPrefix} - API Rate limit exceeded. Status Code: 429." />
                        <If condition="${/rateLimitErrorCount = ${/maxRetry}}">
                            <Log type="INFO" message="${/logPrefix} Abort - Number of retry attempts for status code 429 exceeded." />
                            <Abort reason="Number of retries exceeded for status code 429." />
                        </If>

                        <!-- Calculating back off time, if it is not present in header take default time -->
                        <Set path="/sleepTime" value="${/refreshTokenResponse/headers/retry-after}" />
                        <If condition="${/sleepTime = ''}">
                            <Set path="/sleepTime" value="${/defaultSleepTime}" />
                        </If>
                        <Log type="INFO" message="${/logPrefix} - Sleeping for ${/sleepTime} seconds." />
                        <Sleep duration="${/sleepTime * 1000}" />
                    </If>
                    <Else>
                        <Set path="/rateLimitErrorCount" value="${/maxRetry}" />
                    </Else>
                </While>

                <!-- Storing Refresh token and Access token from API response -->
                <If condition="${/refreshTokenResponse/status_code} = 200">
                    <Log type="INFO" message="${/logPrefix} - Refresh token and Access token created successfully." />
                    <Set path="/refreshToken" value="${/refreshTokenResponse/body/refresh_token}" />
                    <Set path="/accessToken" value="${/refreshTokenResponse/body/access_token}" />
                </If>

                <!-- Aborting execution of workflow for http status code other than 200 -->
                <Else>
                    <Log type="INFO" message="${/logPrefix} Abort - API call failed while creating Access token with status code - ${/refreshTokenResponse/status_code}, Body - ${/refreshTokenResponse/body}" />
                    <Abort reason="API call failed while creating Access token with status code - ${/refreshTokenResponse/status_code}" />
                </Else>

            </If>
            <Else>

                <Log type="INFO" message="${/logPrefix} - Refresh token found. Creating new Access token using stored Refresh token." />

                <Set path="/rateLimitErrorCount" value="0" />
                <While condition="${/rateLimitErrorCount != ${/maxRetry}}">

                    <!-- Create an Access Token using Refresh token and save response at Jpath /accessTokenResponse-->
                    <CallEndpoint url="${/vectraUrl}${/createTokenEndpoint}" method="POST" savePath="/accessTokenResponse">

                        <!-- Request header -->
                        <RequestHeader name="User-Agent" value="${/userAgentHeader}" />

                        <!-- Request body in the urlencoded format -->
                        <UrlEncodedFormRequestBody>
                            <Parameter name="grant_type" value="refresh_token" />
                            <Parameter name="Content-Type" value="application/x-www-form-urlencoded" />
                            <Parameter name="refresh_token" value="${/refreshToken}" />
                        </UrlEncodedFormRequestBody>
                    </CallEndpoint>

                    <!-- Retry 3 times if the status code is 429. i.e API Rate limit exceeded. -->
                    <If condition="${/accessTokenResponse/status_code} = 429">
                        <Set path="/rateLimitErrorCount" value="${/rateLimitErrorCount + 1}" />
                        <Log type="INFO" message="${/logPrefix} - API Rate limit exceeded. Status Code: 429." />
                        <If condition="${/rateLimitErrorCount = ${/maxRetry}}">
                            <Log type="INFO" message="${/logPrefix} Abort - Number of retry attempts for status code 429 exceeded." />
                            <Abort reason="Number of retries exceeded for status code 429." />
                        </If>

                        <!-- Calculating back off time, if it is not present in header take default time -->
                        <Set path="/sleepTime" value="${/accessTokenResponse/headers/retry-after}" />
                        <If condition="${/sleepTime = ''}">
                            <Set path="/sleepTime" value="${/defaultSleepTime}" />
                        </If>
                        <Log type="INFO" message="${/logPrefix} - Sleeping for ${/sleepTime} seconds." />
                        <Sleep duration="${/sleepTime * 1000}" />
                    </If>
                    <Else>
                        <Set path="/rateLimitErrorCount" value="${/maxRetry}" />
                    </Else>
                </While>

                <!-- Storing Access token from API response -->
                <If condition="${/accessTokenResponse/status_code} = 200">
                    <Log type="INFO" message="${/logPrefix} - Access token created successfully." />
                    <Set path="/accessToken" value="${/accessTokenResponse/body/access_token}" />
                </If>

                <!-- Incase of expired Refresh token -->
                <ElseIf condition="${/accessTokenResponse/status_code} = 401">

                    <Log type="INFO" message="${/logPrefix} - Refresh token is expired. Recreating an Access token and Refresh token using provided credentials." />

                    <Set path="/rateLimitErrorCount" value="0" />
                    <While condition="${/rateLimitErrorCount != ${/maxRetry}}">

                        <!-- Create a Refresh token and Access Token using Client ID and secret and save response at Jpath /refreshTokenResponse-->
                        <CallEndpoint url="${/vectraUrl}${/createTokenEndpoint}" method="POST" savePath="/refreshTokenResponse">

                            <!-- Implicitly convert username and password in the format of basic authentication - "Basic Base64Encode(username:password)" -->
                            <BasicAuthentication username="${/clientId}" password="${/secretKey}" />

                            <!-- Request header -->
                            <RequestHeader name="User-Agent" value="${/userAgentHeader}" />

                            <!-- Request body in the urlencoded format -->
                            <UrlEncodedFormRequestBody>
                                <Parameter name="grant_type" value="client_credentials" />
                                <Parameter name="Accept" value="application/json" />
                                <Parameter name="content-type" value="application/x-www-form-urlencoded" />
                            </UrlEncodedFormRequestBody>
                        </CallEndpoint>

                        <!-- Retry 3 times if the status code is 429. i.e API Rate limit exceeded. -->
                        <If condition="${/refreshTokenResponse/status_code} = 429">
                            <Set path="/rateLimitErrorCount" value="${/rateLimitErrorCount + 1}" />
                            <Log type="INFO" message="${/logPrefix} - API Rate limit exceeded. Status Code: 429." />
                            <If condition="${/rateLimitErrorCount = ${/maxRetry}}">
                                <Log type="INFO" message="${/logPrefix} Abort - Number of retry attempts for status code 429 exceeded." />
                                <Abort reason="Number of retries exceeded for status code 429." />
                            </If>

                            <!-- Calculating back off time, if it is not present in header take default time -->
                            <Set path="/sleepTime" value="${/refreshTokenResponse/headers/retry-after}" />
                            <If condition="${/sleepTime = ''}">
                                <Set path="/sleepTime" value="${/defaultSleepTime}" />
                            </If>
                            <Log type="INFO" message="${/logPrefix} - Sleeping for ${/sleepTime} seconds." />
                            <Sleep duration="${/sleepTime * 1000}" />
                        </If>
                        <Else>
                            <Set path="/rateLimitErrorCount" value="${/maxRetry}" />
                        </Else>
                    </While>

                    <!-- Storing Refresh token and Access token from API response -->
                    <If condition="${/refreshTokenResponse/status_code} = 200">
                        <Log type="INFO" message="${/logPrefix} - Refresh token and Access token created successfully." />
                        <Set path="/refreshToken" value="${/refreshTokenResponse/body/refresh_token}" />
                        <Set path="/accessToken" value="${/refreshTokenResponse/body/access_token}" />
                    </If>

                    <!-- Aborting execution of workflow for failed API call -->
                    <Else>
                        <Log type="INFO" message="${/logPrefix} Abort - API call failed while creating Access token with status code - ${/refreshTokenResponse/status_code}, Body - ${/refreshTokenResponse/body}" />
                        <Abort reason="API call failed while creating Access token with status code - ${/refreshTokenResponse/status_code}" />
                    </Else>
                </ElseIf>

                <!-- Aborting execution of workflow for failed API call with status code other than 200 and 401 -->
                <Else>
                    <Log type="INFO" message="${/logPrefix} Abort - API call failed while creating Access token with status code - ${/accessTokenResponse/status_code}, Body - ${/accessTokenResponse/body}" />
                    <Abort reason="API call failed while creating Access token with status code - ${/accessTokenResponse/status_code}" />
                </Else>
            </Else>

            <!-- Account Scoring Events collection -->
            <Log type="INFO" message="${/logPrefix} - Account Scoring Events collection started." />

            <!-- Set event timestamp value past 24 hours in case of historical is true else current time -->
            <If condition="${'${lower(/historical)}' = 'true'}">
                <Set path="/eventTimestamp" value="${/defaultEventTime}" />
            </If>
            <Else>
                <Set path="/eventTimestamp" value="${/formattedCurrentTime}" />
            </Else>

            <If condition="${empty(/accountNextCheckpoint)} = 'true'">
                <Log type="INFO" message="${/logPrefix} Collecting Account Scorings Events from event_timestamp_gte ${/eventTimestamp}" />
            </If>
            <Else>
                <Log type="INFO" message="${/logPrefix} Collecting Account Scorings Events from checkpoint id ${/accountNextCheckpoint}" />
            </Else>

            <Set path="/errorCount" value="0" />
            <Set path="/loopBreaker" value="false" />

            <While condition="${/loopBreaker} = false">

                <!-- Collect Account Scoring Events using checkpoint ID if present else use event Timestamp -->
                <If condition="${empty(/accountNextCheckpoint)} = 'true'">
                    <Log type="INFO" message="${/logPrefix} Collecting Account Scoring Events with limit = ${/limit}, event_time_gte = ${/eventTimestamp}, type = account" />
                </If>
                <Else>
                    <Log type="INFO" message="${/logPrefix} Collecting Account Scoring Events with limit = ${/limit}, from = ${/accountNextCheckpoint}, type = account" />
                    <Set path="/eventTimestamp" value="" />
                </Else>

                <Set path="/rateLimitErrorCount" value="0" />
                <While condition="${/rateLimitErrorCount != ${/maxRetry}}">
                    <CallEndpoint url="${/vectraUrl}${/scoreEndpoint}" method="GET" savePath="/account/response">

                        <BearerAuthentication token="${/accessToken}" />
                        <QueryParameter name="limit" value="${/limit}" omitIfEmpty="true" />
                        <QueryParameter name="event_timestamp_gte" value="${/eventTimestamp}" omitIfEmpty="true" />
                        <QueryParameter name="from" value="${/accountNextCheckpoint}" omitIfEmpty="true" />
                        <QueryParameter name="type" value="account" />

                        <!-- Request header -->
                        <RequestHeader name="User-Agent" value="${/userAgentHeader}" />

                        <RequestBody type="application/json" encoding="UTF-8">
                        {
                            "Accept": "application/json",
                            "content-type": "application/x-www-form-urlencoded"
                        }
                        </RequestBody>

                    </CallEndpoint>

                    <!-- Retry 3 times if the status code is 429. i.e API Rate limit exceeded. -->
                    <If condition="${/account/response/status_code} = 429">
                        <Set path="/rateLimitErrorCount" value="${/rateLimitErrorCount + 1}" />
                        <Log type="INFO" message="${/logPrefix} - API Rate limit exceeded. Status Code: 429." />
                        <If condition="${/rateLimitErrorCount = ${/maxRetry}}">
                            <Log type="INFO" message="${/logPrefix} Abort - Number of retry attempts for status code 429 exceeded." />
                            <Abort reason="Number of retries exceeded for status code 429." />
                        </If>

                        <!-- Calculating back off time, if it is not present in header take default time -->
                        <Set path="/sleepTime" value="${/account/response/headers/retry-after}" />
                        <If condition="${/sleepTime = ''}">
                            <Set path="/sleepTime" value="${/defaultSleepTime}" />
                        </If>
                        <Log type="INFO" message="${/logPrefix} - Sleeping for ${/sleepTime} seconds." />
                        <Sleep duration="${/sleepTime * 1000}" />
                    </If>
                    <Else>
                        <Set path="/rateLimitErrorCount" value="${/maxRetry}" />
                    </Else>
                </While>

                <If condition="/account/response/status_code = 200">

                    <!-- Ingest collected Account Scoring Events into QRadar -->
                    <PostEvents path="/account/response/body/events" source="${/vectraUrl}" />

                    <!-- Update checkpoint id to latest Account Scoring Events -->
                    <Log type="INFO" message="${/logPrefix} - Total ${count(/account/response/body/events)} Account Scoring Events ingested in QRadar" />

                    <!-- Store next_checkpoint value if not null -->
                    <If condition="/account/response/body/next_checkpoint != null">
                        <Set path="/accountNextCheckpoint" value="${/account/response/body/next_checkpoint}" />
                        <Log type="INFO" message="${/logPrefix} - Next Account Scoring Events checkpoint id = ${/account/response/body/next_checkpoint}" />
                    </If>

                    <If condition="${count(/account/response/body/events) != ${/limit}}">
                        <Set path="/loopBreaker" value="true"/>
                        <Log type="INFO" message="${/logPrefix} Account scoring collection completed." />
                    </If>
                </If>
                <ElseIf condition="/account/response/status_code = 401">

                    <!-- To retry for 401 status code -->
                    <Set path="/loopBreaker" value="true"/>
                    <Set path="/errorCount" value="${/errorCount + 1}" />
                    <Log type="INFO" message="${/logPrefix} - Access token is expired with status code - 401" />
                    <Set path="/accessToken" value="" />
                </ElseIf>
                <ElseIf condition="/account/response/status_code = 404">
                    <Set path="/loopBreaker" value="true"/>
                    <Log type="INFO" message="${/logPrefix} Received status code ${/account/response/status_code} for collecting Account Scoring Events. Body - ${/account/response/body}" />
                </ElseIf>
                <Else>
                    <Log type="INFO" message="${/logPrefix} - API call failed for collecting Account Scoring Events with status code - ${/account/response/status_code}, Body - ${/account/response/body}" />
                    <Abort reason="API call failed for collecting Account Scoring Events with status code - ${/account/response/status_code}" />
                </Else>
            </While>

            <!-- Host Scoring Events collection -->
            <Log type="INFO" message="${/logPrefix} - Host Scoring Events collection started." />

            <!-- Set event timestamp value past 24 hours in case of historical is true else current time -->
            <If condition="${'${lower(/historical)}' = 'true'}">
                <Set path="/eventTimestamp" value="${/defaultEventTime}" />
            </If>
            <Else>
                <Set path="/eventTimestamp" value="${/formattedCurrentTime}" />
            </Else>

            <If condition="${empty(/hostNextCheckpoint)} = 'true'">
                <Log type="INFO" message="${/logPrefix} Collecting Host Scoring Events from event_timestamp_gte ${/eventTimestamp}" />
            </If>
            <Else>
                <Log type="INFO" message="${/logPrefix} Collecting Host Scoring Events from checkpoint id ${/hostNextCheckpoint}" />
            </Else>

            <Set path="/errorCount" value="0" />
            <Set path="/loopBreaker" value="false" />

            <While condition="${/loopBreaker} = false">

                <!-- Collect Host Scoring Events using checkpoint ID if present else use event Timestamp -->
                <If condition="${empty(/hostNextCheckpoint)} = 'true'">
                    <Log type="INFO" message="${/logPrefix} Collecting Host Scoring Events with limit = ${/limit}, event_timestamp_gte = ${/eventTimestamp}, type = host" />
                </If>
                <Else>
                    <Log type="INFO" message="${/logPrefix} Collecting Host Scoring Events with limit = ${/limit}, from = ${/hostNextCheckpoint}, type = host" />
                    <Set path="/eventTimestamp" value="" />
                </Else>

                <Set path="/rateLimitErrorCount" value="0" />
                <While condition="${/rateLimitErrorCount != ${/maxRetry}}">
                    <CallEndpoint url="${/vectraUrl}${/scoreEndpoint}" method="GET" savePath="/host/response">

                        <BearerAuthentication token="${/accessToken}" />
                        <QueryParameter name="limit" value="${/limit}" omitIfEmpty="true" />
                        <QueryParameter name="event_timestamp_gte" value="${/eventTimestamp}" omitIfEmpty="true" />
                        <QueryParameter name="from" value="${/hostNextCheckpoint}" omitIfEmpty="true" />
                        <QueryParameter name="type" value="host" />

                        <!-- Request header -->
                        <RequestHeader name="User-Agent" value="${/userAgentHeader}" />

                        <RequestBody type="application/json" encoding="UTF-8">
                        {
                            "Accept": "application/json",
                            "content-type": "application/x-www-form-urlencoded"
                        }
                        </RequestBody>

                    </CallEndpoint>

                    <!-- Retry 3 times if the status code is 429. i.e API Rate limit exceeded. -->
                    <If condition="${/host/response/status_code} = 429">
                        <Set path="/rateLimitErrorCount" value="${/rateLimitErrorCount + 1}" />
                        <Log type="INFO" message="${/logPrefix} - API Rate limit exceeded. Status Code: 429." />
                        <If condition="${/rateLimitErrorCount = ${/maxRetry}}">
                            <Log type="INFO" message="${/logPrefix} Abort - Number of retry attempts for status code 429 exceeded." />
                            <Abort reason="Number of retries exceeded for status code 429." />
                        </If>

                        <!-- Calculating back off time, if it is not present in header take default time -->
                        <Set path="/sleepTime" value="${/host/response/headers/retry-after}" />
                        <If condition="${/sleepTime = ''}">
                            <Set path="/sleepTime" value="${/defaultSleepTime}" />
                        </If>
                        <Log type="INFO" message="${/logPrefix} - Sleeping for ${/sleepTime} seconds." />
                        <Sleep duration="${/sleepTime * 1000}" />
                    </If>
                    <Else>
                        <Set path="/rateLimitErrorCount" value="${/maxRetry}" />
                    </Else>
                </While>

                <If condition="/host/response/status_code = 200">

                    <!-- Ingest collected hosts into QRadar -->
                    <PostEvents path="/host/response/body/events" source="${/vectraUrl}" />

                    <!-- Update checkpoint id to latest host -->
                    <Log type="INFO" message="${/logPrefix} - Total ${count(/host/response/body/events)} Host Scoring Events ingested in QRadar." />

                    <!-- Store next_checkpoint value if not 'null' -->
                    <If condition="/host/response/body/next_checkpoint != null">
                        <Set path="/hostNextCheckpoint" value="${/host/response/body/next_checkpoint}" />
                        <Log type="INFO" message="${/logPrefix} - Next Host Scoring Events checkpoint id = ${/host/response/body/next_checkpoint}" />
                    </If>

                    <If condition="${count(/host/response/body/events) != ${/limit}}">
                        <Set path="/loopBreaker" value="true"/>
                        <Set path="/errorCount" value="${/maxRetry}"/>
                        <Log type="INFO" message="${/logPrefix} Host Scoring Events collection completed." />
                    </If>
                </If>
                <ElseIf condition="/host/response/status_code = 401">

                    <!-- To retry for 401 status code -->
                    <Set path="/loopBreaker" value="true"/>
                    <Set path="/errorCount" value="${/errorCount + 1}" />
                    <Log type="INFO" message="${/logPrefix} - Access token is expired with status code - 401" />
                    <Set path="/accessToken" value="" />
                </ElseIf>
                <ElseIf condition="/host/response/status_code = 404">
                    <Set path="/loopBreaker" value="true"/>
                    <Set path="/errorCount" value="${/maxRetry}"/>
                    <Log type="INFO" message="${/logPrefix} Received status code ${/host/response/status_code} for collecting Host Scoring Events. Body - ${/host/response/body}" />
                </ElseIf>
                <Else>
                    <Log type="INFO" message="${/logPrefix} - API call failed for collecting Host Scoring Events with status code - ${/host/response/status_code}, Body - ${/host/response/body}" />
                    <Abort reason="API call failed for collecting Host Scoring Events with status code - ${/host/response/status_code}" />
                </Else>
            </While>

        </While>
    </Actions>

    <!-- Performing some connectivity tests -->
    <Tests>
        <DNSResolutionTest host="${/vectraHostName}" />
        <TCPConnectionTest host="${/vectraHostName}" />
        <SSLHandshakeTest host="${/vectraHostName}" />
        <HTTPConnectionThroughProxyTest url="https://${/vectraHostName}" />
    </Tests>

</Workflow>