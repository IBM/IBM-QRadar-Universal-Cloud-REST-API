<?xml version="1.0" encoding="UTF-8" ?>
<Workflow name="Cyble Threat Intel" version="1.0" xmlns="http://qradar.ibm.com/UniversalCloudRESTAPI/Workflow/V1">

    <!--    Reading required parameters for the Workflow-->
    <Parameters>
        <Parameter name="hostname" label="Hostname" required="true" secret="true" />
        <Parameter name="api_key" label="Api Key" required="true" secret="true" />
        <Parameter name="fetch_since" label="Fetch Since" required="true" secret="true" />
    </Parameters>

    <Actions>

        <!--        Initializing parameters-->
        <Initialize path="/isFirstFetch" value="True" />
        <Initialize path="/fromDate" value="" />
        <Initialize path="/toDate" value="" />
        <Initialize path="/fetch_since_int" value="1" />

        <!--        Checking whether the current run is fetching for the first time-->
        <If condition="/isFirstFetch = 'True'">
            <Set path="/fetch_since_int" value="${/fetch_since}" />
            <Set path="/fromDate" value="${time() - /fetch_since_int * 24 * 60 * 60 * 1000}" />
            <Set path="/isFirstFetch" value="False" />
            <Log type="INFO" message="CybleThreatIntel:: Fetching events for the first time." />
        </If>
        <Else>
            <Set path="/fromDate" value="${/toDate + 1}" />
        </Else>

        <Set path="/toDate" value="${time() - 1}" />

        <!--        Formatting date from epoch notation to standard notation-->
        <FormatDate pattern="yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" timeZone="UTC" time="${/fromDate}" savePath="/fromDateFormatted" />
        <FormatDate pattern="yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" timeZone="UTC" time="${/toDate}" savePath="/toDateFormatted" />

        <Log type="INFO" message="CybleThreatIntel:: Fetching events from: ${/fromDateFormatted} to: ${/toDateFormatted}" />

        <!--        Fetching count of total events available in the given time frame-->
        <CallEndpoint url="https://${/hostname}/apollo/api/v1/y/alerts" method="POST" savePath="/get_count">
            <RequestHeader name="Accept" value="*/*" />
            <RequestHeader name="Authorization" value="Bearer ${/api_key}" />
            <RequestHeader name="Content-Type" value="application/json" />
            <RequestBody type="application/json" encoding="UTF-8">
                {
                "countOnly": true,
                "where": {
                "created_at": {
                "gte": "${/fromDateFormatted}",
                "lte": "${/toDateFormatted}"
                }
                }
                }
            </RequestBody>
        </CallEndpoint>

        <!--        Handling error-->
        <If condition="${/get_count/status_code} != 200">
            <Log type="DEBUG" message="CybleThreatIntel:: API Request Failed. Reason: ${/get_count/status_message}" />
            <Abort reason="${/get_count/status_code}: ${/get_count/status_message}" />
        </If>

        <!--        Setting parameters for API request for fetching events-->
        <Set path="/total_count" value="${/get_count/body/data/count}" />
        <Set path="/skip" value="0" />
        <Set path="/take" value="1000" />

        <While condition="${/total_count} > 0" >
            <If condition="${/take} > ${/total_count}">
                <Set path="/take" value="${/total_count}" />
            </If>

            <CallEndpoint url="https://${/hostname}/apollo/api/v1/y/alerts" method="POST" savePath="/get_events">
                <RequestHeader name="Accept" value="*/*" />
                <RequestHeader name="Authorization" value="Bearer ${/api_key}" />
                <RequestHeader name="Content-Type" value="application/json" />
                <RequestBody type="application/json" encoding="UTF-8">
                    {
                    "orderBy": [
                    {
                    "created_at": "asc"
                    }
                    ],
                    "select": {
                    "archive_date": true,
                    "archived": true,
                    "assignee_id": true,
                    "assignment_date": true,
                    "created_at": true,
                    "data_id": true,
                    "deleted_at": true,
                    "description": true,
                    "hash": true,
                    "id": true,
                    "metadata": true,
                    "risk_score": true,
                    "service": true,
                    "severity": true,
                    "status": true,
                    "tags": true,
                    "updated_at": true,
                    "user_severity": true
                    },
                    "skip": ${/skip},
                    "take": ${/take},
                    "withDataMessage": true,
                    "where": {
                    "created_at": {
                    "gte": "${/fromDateFormatted}",
                    "lte": "${/toDateFormatted}"
                    },
                    "status": {
                    "in": [
                    "VIEWED",
                    "UNREVIEWED",
                    "CONFIRMED_INCIDENT",
                    "UNDER_REVIEW",
                    "INFORMATIONAL"
                    ]
                    }
                    }
                    }
                </RequestBody>
            </CallEndpoint>


            <If condition="${/get_events/status_code} != 200">
                <Log type="DEBUG" message="CybleThreatIntel:: API Request Failed. Reason: ${/get_count/status_message}" />
                <Abort reason="${/get_events/status_code}: ${/get_events/status_message}" />
            </If>

            <Log type="INFO" message="CybleThreatIntel:: Fetched ${count(/get_events/body/data)} events." />

            <ForEach item="/current_event" items="/get_events/body/data">
                <PostEvent path="/current_event" source="${/hostname}" />
            </ForEach>

            <Set path="/total_count" value="${/total_count - /take}" />
            <Set path="/skip" value="${/skip + /take}" />

        </While>

    </Actions>

    <!--    Running tests-->
    <Tests>
        <DNSResolutionTest host="${/hostname}" />
        <TCPConnectionTest host="${/hostname}" />
        <SSLHandshakeTest host="${/hostname}"/>
        <HTTPConnectionThroughProxyTest url="https://${/hostname}" />
    </Tests>

</Workflow>