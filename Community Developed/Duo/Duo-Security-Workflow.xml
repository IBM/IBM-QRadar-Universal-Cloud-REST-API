<?xml version="1.0" encoding="UTF-8" ?>
<!--
Duo Admin API
https://duo.com/docs/adminapi
Duo Admin Panel
https://admin.duosecurity.com/
To obtain an 'Integration Key' and 'Secret Key':
- Log on to the Duo Admin Panel
- Navigate to "Applications"
- Select the application to be monitored.
- The "Integration Key" and "Secret Key" should be visible on the application page.
Note:
The Duo log APIs have rate limits where they can only be called every 5 minutes otherwise the API will
return a "42901: Too Many Requests" error.  For this reason, this workflow uses the `minimumRecurrence`
to ensure that we don't poll faster than allowed (set to a 6 minutes to avoid edge cases).  See the
following Duo issue for details: https://github.com/duosecurity/duo_client_python/issues/101
-->
<Workflow name="Duo" version="1.0" minimumRecurrence="180" xmlns="http://qradar.ibm.com/UniversalCloudRESTAPI/Workflow/V1">

    <Parameters>
        <Parameter name="host" label="Host" required="true" />
        <Parameter name="integration_key" label="Integration Key" required="true" />
        <Parameter name="secret_key" label="Secret Key" required="true" secret="true" />
    </Parameters>

    <Actions>

        <!--
        ////////////////////////////
        // v2 Authentication Logs //
        ////////////////////////////
        -->
        
        <!-- Clear the log source status before a new workflow run starts -->
	    <ClearStatus />
        
        <!-- Initialize the Bookmark -->
        <!-- Starting Bookmark is T-1hour in ms (3600000) -->
        <Initialize path="/auth_logs/bookmark" value="${time() - 3600000}" />

        <!-- Initialize the Maxtime and Limit (The maximum number of records returned. Default: 100; Max: 1000) -->
        <Initialize path="/auth_logs/maxtime" value="${time()}" />
        <Initialize path="/auth_logs/limit" value="1000" />

        <!-- Always use up to date Maxtime -->
        <Set path="/auth_logs/maxtime" value="${time()}" />
 
        <!-- Generate an Access Token -->
        <FormatDate pattern="EEE, dd MMM yyyy HH:mm:ss Z" timeZone="UTC" savePath="/auth_logs/date" />
        <Set path="/value" value="${/auth_logs/date}&#xA;GET&#xA;${/host}&#xA;/admin/v2/logs/authentication&#xA;limit=${/auth_logs/limit}&amp;maxtime=${/auth_logs/maxtime}&amp;mintime=${/auth_logs/bookmark}" />
        <GenerateHMAC algorithm="SHA1" secretKey="${/secret_key}" message="${/value}" saveFormat="HEX" savePath="/signature" />
        <Log type="DEBUG" message="DUO API request: ${/value}." />

        <!-- Fetch the Events -->
        <CallEndpoint url="https://${/host}/admin/v2/logs/authentication" method="GET" savePath="/auth_logs/response">
            <BasicAuthentication username="${/integration_key}" password="${/signature}" />
            <QueryParameter name="limit" value="${/auth_logs/limit}" omitIfEmpty="true" />
            <QueryParameter name="maxtime" value="${/auth_logs/maxtime}" omitIfEmpty="true" />
            <QueryParameter name="mintime" value="${/auth_logs/bookmark}" omitIfEmpty="true" />
            <RequestHeader name="Date" value="${/auth_logs/date}" />
        </CallEndpoint>

        <!-- Handle Errors -->
        <If condition="/auth_logs/response/status_code != 200">
            <Abort reason="${/auth_logs/response/body/code}: ${/auth_logs/response/body/message}" />
            <Log type="INFO" message="DUO Abort reason: ${/auth_logs/response/body/code}: ${/auth_logs/response/body/message}" />
        </If>

        <!-- Post the Events -->
        <If condition="/auth_logs/response/body/response/metadata/next_offset != null" >
            <PostEvents path="/auth_logs/response/body/response/authlogs" source="${/host}" />

            <!-- Update the Bookmark for the next iteration -->
            <!-- Converted to 13 character Unix timestamp in milliseconds + 1 -->
    
            <If condition="count(/auth_logs/response/body/response) > 0" >
                <Set path="/auth_logs/bookmark" value="${(max(/auth_logs/response/body/response/authlogs/timestamp) * 1000 ) + 1000}" />
            </If>
        </If>

        <!-- Log API calls and number of received records -->
        <Log type="INFO" message="Got ${/auth_logs/response/body/response/metadata/total_objects} events from DUO API: ${/host}" />

        <!--
        ////////////////////////
        // Administrator Logs //
        ////////////////////////
        -->

        <!-- Initialize the Bookmark -->
        <Initialize path="/admin_logs/bookmark" value="1" />

        <!-- Generate an Access Token -->
        <FormatDate pattern="EEE, dd MMM yyyy HH:mm:ss Z" timeZone="UTC" savePath="/admin_logs/date" />
        <Set path="/value" value="${/admin_logs/date}&#xA;GET&#xA;${/host}&#xA;/admin/v1/logs/administrator&#xA;mintime=${/admin_logs/bookmark}" />
        <GenerateHMAC algorithm="SHA1" secretKey="${/secret_key}" message="${/value}" saveFormat="HEX" savePath="/signature" />

        <!-- Fetch the Events -->
        <CallEndpoint url="https://${/host}/admin/v1/logs/administrator" method="GET" savePath="/admin_logs/response">
            <BasicAuthentication username="${/integration_key}" password="${/signature}" />
            <QueryParameter name="mintime" value="${/admin_logs/bookmark}" omitIfEmpty="true" />
            <RequestHeader name="Date" value="${/admin_logs/date}" />
        </CallEndpoint>

        <!-- Handle Errors -->
        <If condition="/admin_logs/response/status_code != 200">
            <Abort reason="${/admin_logs/response/body/code}: ${/admin_logs/response/body/message}" />
        </If>

        <!-- Post the Events -->
        <PostEvents path="/admin_logs/response/body/response" source="${/host}" />

        <!-- Update the Bookmark for the next iteration -->
        <If condition="count(/admin_logs/response/body/response) > 0" >
            <Set path="/admin_logs/bookmark" value="${max(/admin_logs/response/body/response/timestamp) + 1}" />
        </If>

    </Actions>

    <Tests>
        <DNSResolutionTest host="${/host}" />
        <TCPConnectionTest host="${/host}" />
        <SSLHandshakeTest host="${/host}" />
        <HTTPConnectionThroughProxyTest url="https://${/host}" />
    </Tests>

</Workflow>
