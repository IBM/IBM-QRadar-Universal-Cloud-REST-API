<?xml version="1.0" encoding="UTF-8" ?>
<!--

This workflow can be used to pull events from Prisma Cloud (aka Prisma Public Cloud, aka Redlock).

It will not work with Prisma Cloud Compute Edition (aka Twistlock).

Prisma Cloud REST API Documentation
https://api.docs.prismacloud.io/reference

-->
<Workflow name="Prisma Cloud" version="1.3" xmlns="http://qradar.ibm.com/UniversalCloudRESTAPI/Workflow/V1">

    <Parameters>
        <Parameter name="host" label="Host" required="true" />
        <Parameter name="access_key_id" label="Access Key ID" required="true" />
        <Parameter name="secret_key" label="Secret Key" required="true" secret="true" />
    </Parameters>

    <Actions>

        <!--
        //////////////////////
        // Get Access Token //
        //////////////////////
        -->
        <CallEndpoint url="https://${/host}/login" method="POST" savePath="/get_access_token" >
            <RequestBody type="application/json" encoding="UTF-8">{ "username": "${/access_key_id}", "password": "${/secret_key}" }</RequestBody>
        </CallEndpoint>

        <!-- Handle Errors -->
        <If condition="/get_access_token/status_code != 200">
            <Abort reason="${/get_access_token/body/message}" />
        </If>

        <!-- Extract the Access Token -->
        <Set path="/access_token" value="${/get_access_token/body/token}" />


        <!--
        /////////////////////////////
        // Get Alerts (First Page) //
        /////////////////////////////
        -->

        <!-- Initialize the Bookmark -->
        <Initialize path="/get_alerts/bookmark" value="1" />

        <!-- Fetch the first page of alerts -->
        <CallEndpoint url="https://${/host}/v2/alert" method="POST" savePath="/get_alerts" >
            <RequestHeader name="Accept" value="*/*" />
            <RequestHeader name="x-redlock-auth" value="${/access_token}" />
            <RequestBody type="application/json" encoding="UTF-8">
                {
                    "timeRange":
                    {
                        "type": "absolute",
                        "value":
                        {
                            "startTime": ${/get_alerts/bookmark}
                        }
                    },
                    "sortBy":["lastSeen:asc"],
                    "limit": 50,
                    "detailed": true
                }
            </RequestBody>
        </CallEndpoint>

        <!-- Handle Errors -->
        <If condition="/get_alerts/status_code != 200">
            <Abort reason="${/get_alerts/status_code} ${/get_alerts/status_message}" />
        </If>

        <!-- Post Events -->
        <PostEvents path="/get_alerts/body/items" source="${/host}"/>

        <!-- Update the bookmark -->
        <If condition="count(/get_alerts/body/items) > 0">
            <Set path="/get_alerts/bookmark" value="${max(/get_alerts/body/items/lastSeen) + 1}" />
        </If>

        <!--
        /////////////////////////////////
        // Get Alerts (Remaining Page) //
        /////////////////////////////////
        -->

        <!-- Fetch the remaining of the pages -->
        <While condition="/get_alerts/body/nextPageToken != null">

            <CallEndpoint url="https://${/host}/v2/alert" method="POST" savePath="/get_alerts" >
                <QueryParameter name="detailed" value="true" />
                <RequestHeader name="Accept" value="*/*" />
                <RequestHeader name="x-redlock-auth" value="${/access_token}" />
                <RequestBody type="application/json" encoding="UTF-8">{ "pageToken": "${/get_alerts/body/nextPageToken}" }</RequestBody>
            </CallEndpoint>

            <!-- Handle Errors -->
            <If condition="/get_alerts/status_code != 200">
                <Abort reason="${/get_alerts/status_code} ${/get_alerts/status_message}" />
            </If>

            <!-- Post Events -->
            <PostEvents path="/get_alerts/body/items" source="${/host}"/>

            <!-- Update the bookmark -->
            <If condition="count(/get_alerts/body/items) > 0">
                <Set path="/get_alerts/bookmark" value="${max(/get_alerts/body/items/lastSeen) + 1}" />
            </If>

        </While>

    </Actions>

    <Tests>
        <DNSResolutionTest host="${/host}" />
        <TCPConnectionTest host="${/host}" />
        <SSLHandshakeTest host="${/host}" />
        <HTTPConnectionThroughProxyTest url="https://${/host}" expectedResponseStatus="404" />
    </Tests>

</Workflow>